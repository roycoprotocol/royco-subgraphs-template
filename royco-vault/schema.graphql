type WrappedVaultCreated @entity(immutable: true) {
  id: String!
  underlyingVaultAddress: String! # address
  incentivizedVaultAddress: String! # address
  owner: String! # address
  inputToken: String! # address
  frontendFee: BigInt! # uint256
  name: String! # string
  vaultSymbol: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type ReferralFeeUpdated @entity(immutable: true) {
  id: String!
  newReferralFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type APOfferCreated @entity(immutable: true) {
  id: String!
  offerId: BigInt! # uint256
  marketId: String! # address
  fundingVault: String! # address
  quantity: BigInt! # uint256
  incentivesRequested: [String!]! # address[]
  incentivesRates: [BigInt!]! # uint256[]
  expiry: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type APOfferFilled @entity(immutable: true) {
  id: String!
  offerId: BigInt! # uint256
  fillAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type APOfferCancelled @entity(immutable: true) {
  id: String!
  offerId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawMarket @entity {
  id: String! # <CHAIN_ID>_<MARKET_TYPE>_<MARKET_ID>
  chainId: BigInt! # Hardcoded
  marketType: Int! # Hardcoded
  marketId: String!
  creator: String! # address
  owner: String! # address
  inputTokenId: String!
  lockupTime: BigInt!
  frontendFee: BigInt!
  rewardStyle: Int!
  incentivesAskedIds: [String!]! # array of strings: <CHAIN_ID>-<TOKEN_ADDRESS>
  incentivesOfferedIds: [String!]! # array of strings: <CHAIN_ID>-<TOKEN_ADDRESS>
  incentivesAskedAmount: [BigInt!]! # array of BigInts
  incentivesOfferedAmount: [BigInt!]! # array of BigInts
  quantityAsked: BigInt! # initially 0
  quantityOffered: BigInt! # initially 0, for vaults it's total number of assets deposited
  quantityAskedFilled: BigInt! # initially 0
  quantityOfferedFilled: BigInt! # initially 0, for vaults it's total number of shares minted
  volumeTokenIds: [String!]! # array of strings: <CHAIN_ID>-<TOKEN_ADDRESS>
  volumeAmounts: [BigInt!]! # array of BigInts
  transactionHash: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  logIndex: BigInt!
  # Vault market fields
  underlyingVaultAddress: String! # address
  incentivesRates: [BigInt!]! # array of BigInts
  startTimestamps: [BigInt!]! # array of BigInts
  endTimestamps: [BigInt!]! # array of BigInts
}

type RawActivity @entity {
  id: String! # <CHAIN_ID>_<TRANSACTION_HASH>_<LOG_INDEX>
  chainId: BigInt! # Hardcoded
  marketType: Int! # Hardcoded
  marketId: String!
  accountAddress: String! # address
  activityType: String!
  tokensGivenIds: [String!]! # array of strings: <CHAIN_ID>-<TOKEN_ADDRESS>
  tokensGivenAmount: [BigInt!]! # array of BigInts
  tokensReceivedIds: [String!]! # array of strings: <CHAIN_ID>-<TOKEN_ADDRESS>
  tokensReceivedAmount: [BigInt!]! # array of BigInts
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawOffer @entity {
  id: String! # <CHAIN_ID>_<MARKET_TYPE>_<OFFER_SIDE>_<OFFER_ID>
  chainId: BigInt! # Hardcoded
  marketType: Int! # Hardcoded
  offerSide: Int!
  offerId: String!
  marketId: String!
  creator: String! # address
  fundingVault: String! # address
  inputTokenId: String!
  quantity: BigInt!
  quantityRemaining: BigInt!
  expiry: BigInt!
  tokenIds: [String!]! # array of strings: <CHAIN_ID>-<TOKEN_ADDRESS>
  tokenAmounts: [BigInt!]! # array of BigInts
  protocolFeeAmounts: [BigInt!]! # array of BigInts
  frontendFeeAmounts: [BigInt!]! # array of BigInts
  isCancelled: Boolean!
  transactionHash: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  logIndex: BigInt!
}

type Deposit @entity(immutable: true) {
  id: String!
  caller: String! # address
  owner: String! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type Withdraw @entity(immutable: true) {
  id: String!
  caller: String! # address
  receiver: String! # address
  owner: String! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RewardsSet @entity(immutable: true) {
  id: String!
  reward: String! # address
  start: BigInt! # uint256
  end: BigInt! # uint256
  rate: BigInt! # uint256
  totalRewards: BigInt! # uint256
  protocolFee: BigInt! # uint256
  frontendFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RewardsTokenAdded @entity(immutable: true) {
  id: String!
  reward: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type FrontendFeeUpdated @entity(immutable: true) {
  id: String!
  frontendFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type RawAccountBalance @entity {
  id: String! # <CHAIN_ID>_<MARKET_TYPE>_<MARKET_ID>_<ACCOUNT_ADDRESS>
  chainId: BigInt! # Hardcoded
  marketType: Int! # Hardcoded
  marketId: String!
  accountAddress: String! # address
  inputTokenId: String! # <CHAIN_ID>-<TOKEN_ADDRESS>
  quantityGivenAmount: BigInt!
  quantityReceivedAmount: BigInt!
  incentivesGivenIds: [String!]! # array of strings: <CHAIN_ID>-<TOKEN_ADDRESS>
  incentivesGivenAmount: [BigInt!]! # array of BigInts
}

type OwnershipTransferred @entity(immutable: true) {
  id: String!
  oldOwner: String! # address
  newOwner: String! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type Transfer @entity(immutable: true) {
  id: String!
  from: String! # address
  to: String! # address
  tokens: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}
